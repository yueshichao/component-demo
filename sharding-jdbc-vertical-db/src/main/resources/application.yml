server:
  port: 9002

spring:
  application:
    name: sharding-jdbc-sample-demo
  # Sharding-JDBC分片规则配置
  shardingsphere:
    datasource:
      names: m0, m1, m2 # 多个数据源
      # 数据源0
      m0:
        driver-class-name: com.mysql.jdbc.Driver
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://192.168.0.106:3306/user_db?useUnicode=true&useSSL=false
        username: root
        password: 123456
      # 数据源1
      m1:
        driver-class-name: com.mysql.jdbc.Driver
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://192.168.0.106:3306/order_db_1?useUnicode=true&useSSL=false
        username: root
        password: 123456
      # 数据源2
      m2:
        driver-class-name: com.mysql.jdbc.Driver
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://192.168.0.106:3306/order_db_2?useUnicode=true&useSSL=false
        username: root
        password: 123456
    sharding:
      tables:
        t_user:
          actual-data-nodes: m0.t_user # 垂直分库的user表
          # 垂直分库时的表路由策略，可以不配置，但为了以后方便，写上再说
          table-strategy.inline:
            sharding-column: user_id
            algorithm-expression: t_user
        t_order:
          # 分库策略
          database-strategy.inline:
            sharding-column: user_id
            algorithm-expression: m$->{user_id % 2 + 1}
          # 1. 数据表分片情况
          actual-data-nodes: m$->{1..2}.t_order_${1..2}
          # 2. 主键生成策略
          key-generator:
            column: order_id
            type: SNOWFLAKE
          # 3. 分片策略：分片键和分片算法
          table-strategy.inline:
            sharding-column: order_id
            algorithm-expression: t_order_$->{order_id % 2 + 1}

spring.shardingsphere.props.sql.show: true


mybatis:
  configuration:
    map-underscore-to-camel-case: true

logging:
  level:
    root: info
    druid.sql: debug



